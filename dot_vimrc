" ----- Meta Setup ----------------------------- {{{
" Ignore backwards compatibility
" Need to be first line
set nocompatible

" Enable code folding in this file
" Folding sequence: '{{{' -> '}}}'
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" ----- Meta Setup ----------------------------- }}}


" ----- Vim-Plug ------------------------------- {{{
"  ----- Setup ------------------------------- {{{
" Automatic installation, see here:
" https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation

" Vim automatic installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" NeoVim automatic installation
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Initialize Vim-Plug
call plug#begin('~/.vim/plugged')
"  ----- Setup ------------------------------- }}}

"  ----- Plugins ----------------------------- {{{
"   ---- Post-Update Hook definitions ------- {{{
function! PostUpdateVimLanguagetool(info)
    " info is a dictionary with 3 fields
    " - name:   name of the plugin
    " - status: 'installed', 'updated', or 'unchanged'
    " - force:  set on PlugInstall! or PlugUpdate!
    let l:languagetool_zip_file = s:languagetool_file_name . '.zip'
    let l:languagetool_zip_url = 'https://www.languagetool.org/download/'
                \ . l:languagetool_zip_file


    " Delete existing archive (if exist)
    execute '!rm -f' l:languagetool_zip_file
    " Download new archive
    execute '!curl -fLO' l:languagetool_zip_url
    " Unzip archive
    execute '!unzip ' l:languagetool_zip_file
    " Delete archive (keep unzipped version)
    execute '!rm' l:languagetool_zip_file
endfunction
"   ----- Post-Update Hook definitions ------ }}}

"   --- Making Vim look good -----------------
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
Plug 'junegunn/goyo.vim'
Plug 'yggdroot/indentline'

"   --- Text manipulation --------------------
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'

"   --- Navigation ---------------------------
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeFind', 'NERDTreeToggle'] }
Plug 'justinmk/vim-sneak'
Plug 'vim-scripts/BufOnly.vim'
Plug 'mileszs/ack.vim'

"   --- Git integration ----------------------
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

"   --- Code Completion / Linting ------------
Plug 'w0rp/ale'
Plug 'Valloric/YouCompleteMe', { 'do': 'python3 ./install.py' }
"    -- Elixir -------------------------------
" Plug 'slashmili/alchemist.vim'
" Plug 'elixir-editors/vim-elixir'
"    -- Python -------------------------------
Plug 'tmhedberg/simpylfold'
"    -- Markdown -----------------------------
Plug 'nelstrom/vim-markdown-folding'

"    -- Plain text / Grammar -----------------
Plug 'dpelle/vim-languagetool', { 'do': function('PostUpdateVimLanguagetool') }

"  ----- Plugins ----------------------------- }}}

"   ----- Cleanup --------------------------- {{{
call plug#end()
"   ----- Cleanup --------------------------- }}}
" ----- Vim-Plug ------------------------------- }}}


" ----- General settings ------------------------------------------ {{{
set backspace=indent,eol,start " To unify 'backspace' behavior across OS
set ruler          " Line and char number at the bottom
set number         " Line number on the side
set showcmd        " Show pressed key - bottom slight right
set mouse=a        " Activate mouse scroll / click / etc...
set belloff=all    " Disable the bell - 1/3
set visualbell     " Disable the bell - 2/3
set noerrorbells   " Disable the bell - 3/3
set noshowmode     " Disable 'showmode'. Things like '-- INSERT --'
set nowrap         " Disable line wrapping
set hidden         " Allow buffers with modifications in the background
set scrolloff=3    " Move screen when cursor 3 lines from the edge
syntax on          " Activate syntax highlighting
set autoindent     " Indent continuation
set smartindent    " Some 'smart' indenting, not very advanced
set splitbelow     " Open splits 'below', instead of above, for vertical splits
set splitright     " Open splits 'right', instead of left, for horizontal splits
set signcolumn=yes " Always show the SignColumn (git & linting)
" When opening a split-buffer already visible IN THE CURRENT TAB:
" Jump to it
set switchbuf=useopen
set autoread       " Automatically reload files when changed on disk
"  ----- Set swap 'directory' ---------------- {{{
let s:swapdir = $HOME."/.vim/swapfiles//"
if !isdirectory(s:swapdir)
    call mkdir(s:swapdir, "p")
endif
let &directory = s:swapdir " Directory where to save all the swapfiles
" 'let &OPTION' is the same as 'set OPTION' but allows
" the use of variables (s:swapdir in our case)
"  ----- Set swap 'directory' ---------------- }}}

"  ----- Setup TABS as SPACES ----------------------------------------
set expandtab " Use spaces instead of TAB in INSERT mode
set smarttab
set shiftwidth=4
set tabstop=4

"  ----- Setup search ------------------------------------------------
set hlsearch   " Highlight current / previous search
set incsearch  " Highlight search while typing search chars
set ignorecase " Ignore case when searching ...
set smartcase  " ...except when specifically searching for CAPS

"  ----- Turn on persistent undo -------------------------------------
set undodir=~/.vim/undodir
set undofile

"  ----- Enable and configure Wildmenu -------------------------------
" Enable zsh-like completion
" longest
"   -> Only complete longest common match
" longest:full
"   -> Only complete longest common match, but open wildmenu
" longest:full, full
"   -> Only complete longest common match, but open wildmenu
"   -> Then (second press) cycle through entries of wildmenu
set wildmode=longest:full,full
set wildmenu
"  Ignore compiled files
set wildignore=*.o,*~,*.pyc
"  Ignore meta files
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

"  ----- Theme -------------------------------------------------------
" Toggle this to 'light' | 'dark' for different colorschemes
set background=dark
set termguicolors
" Gui Options:
"  - 'a' -> Universal Copy Paste
"  - 'A' -> (More?) Universal Copy Paste
"  - 'm' -> Menu bar is present (??)
"  - 'g' -> Grey menu for non-active items (??)
set guioptions=amgi
set guifont=Fira\ Code\ Retina:h12
" Activate italic if running GUI
if has('gui_running')
    " TODO: Find out why italic doesn't work on MacVim
    " ('g:gruvbox_italic' is correctly set)
    let g:gruvbox_italic=1
endif
" Set the colorscheme
colorscheme gruvbox
" ----- General settings ------------------------------------------ }}}


" ----- Language specific settings -------------------------------- {{{
autocmd FileType python call <SID>python_configuration()
autocmd FileType yaml call <SID>yaml_configuration()

"  ----- Python ------------------------------ {{{
function! s:python_configuration()
    " setlocal shiftwidth=2
    " setlocal tabstop=2
endfunction
"  ----- Python ------------------------------ }}}
"  ----- Yaml ------------------------------ {{{
function! s:yaml_configuration()
    setlocal shiftwidth=2
    setlocal tabstop=2
    setlocal foldmethod=marker
endfunction
"  ----- Yaml ------------------------------ }}}
" ----- Language specific settings -------------------------------- }}}


" ----- Plugin-Specific Settings ---------------------------------- {{{
"  ----- vim-airline/vim-airline -------------------------------------
" Always show statusbar
set laststatus=2
" Theme
let g:airline_theme='solarized'
" Activate patched font for powerline
let g:airline_powerline_fonts=1
" Show PASTE if in paste mode
let g:airline_detect_paste=1
" Show airline for tabs too
"let g:airline#extensions#tabline#enabled = 1
" Activate extension for 'w0rp/ale'
"let g:airline#extensions#ale#enabled = 1

"  ----- yggdroot/indentline -----------------------------------------
" Disable conceal for JSON and Markdown
" See: Disabling conceal for JSON and Markdown without disabling indentLine plugin in https://github.com/Yggdroot/indentLine#customization
let g:vim_json_conceal=0
let g:markdown_syntax_conceal=0

"  ----- scrooloose/nerdtree -----------------------------------------
" Enable natural sort order (z1, z2, z10 instead of z1, z10, z2)
let NERDTreeNaturalSort=1
" Automatically close NERDTree when opening a file from NERDTree
let NERDTreeQuitOnOpen = 1
" Remove 'Press ? for help'
let NERDTreeMinimalUI = 1
" Close Vim if NERDTree is the only window open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"  ----- w0rp/ale ----------------------------------------------------
let g:ale_lint_on_enter = 1
let g:ale_lint_on_text_changed = 'always'
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '▲'
let g:ale_set_highlights = 0
let g:ale_fixers = {
            \ 'python': ['autopep8'],
            \ }
let g:ale_python_pylint_options = '--disable=missing-docstring'

"  ----- Valloric/YouCompleteMe --------------------------------------
"  Use cmd name as binary_path
"  => Allows to get the one from the virtualenv
let g:ycm_python_binary_path = 'python'
" Uncomment this option to add '<Enter>' to the list of key for 'TAB selection'
" Default: ['<TAB>', '<Down>']
" let g:ycm_key_list_select_completion = ['<TAB>', '<Down>', '<Enter>']


"  ----- ctrlpvim/ctrlp.vim ------------------------------------------
"  'c' - the directory of the current file.
"  'a' - the directory of the current file, unless it is a subdirectory of the cwd
"  'r' - the nearest ancestor of the current file that contains one of these directories or files: .git .hg .svn .bzr _darcs
"  'w' - modifier to "r": start search from the cwd instead of the current file's directory
"   0 or '' (empty string) - disable this feature.
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_show_hidden = 1

"  ----- airblade/vim-gitgutter --------------------------------------
" Reduce update time for gitgutter to 100ms (default 4s)
set updatetime=100

"  ----- justinmk/vim-sneak ------------------------------------------
" Activate labels on 'sneak' results. Just like easy-motion
let g:sneak#label=1

"  ----- junegunn/goyo.vim (zenmode) ---------------------------------
let g:goyo_width = 80
let g:goyo_height = '95%'
" Function called when `Goyo - Zenmode` is activated
function! s:goyo_enter()
    " Store values of 'break lines' behavior
    let s:wrap_original_val = &wrap
    let s:linebreak_original_val = &linebreak

    " Force 'break lines'
    set wrap
    set linebreak

    " Navigate through wrapped lines with `j (down)` and `k (up)`
    noremap j gj
    noremap k gk
endfunction
" Function called when `Goyo - Zenmode` is deactivated
function! s:goyo_leave()
    " Restore 'break lines' behavior
    let &wrap = s:wrap_original_val
    let &linebreak = s:linebreak_original_val

    " Deactivate navigation through wrapped lines with `j (down)` and `k (up)`
    unmap j
    unmap k
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

"  ----- dpelle/vim-languagetool -------------------------------------
"  Update this setting to update the version of 'languagetool' cli to
"  use. Run ':PlugInstall!' afterwards
let s:languagetool_version = '4.1'

"  Required for: PostUpdateHook & Location of Jar
let s:languagetool_file_name = 'LanguageTool-' . s:languagetool_version
"  Plugin directory
let s:vim_languagetool_plugin_dir = get(
                                    \ get(
                                        \ g:plugs,
                                        \ 'vim-languagetool',
                                        \ {}),
                                    \ 'dir',
                                    \ '')

"  Set location of 'languagetool' cli jar for 'vim-languagetool'
let g:languagetool_jar =
            \ s:vim_languagetool_plugin_dir
            \ . s:languagetool_file_name
            \ . '/languagetool-commandline.jar'

"  ----- scrooloose/nerdcommenter ------------------------------------
let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1

"  ----- yggdroot/indentline -----------------------------------------
let g:indentLine_char = '│'

"  ----- tmhedberg/simpylfold ----------------------------------------
let g:SimpylFold_fold_docstring = 0

"  ----- mileszs/ack.vim ---------------------------------------------
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" ----- Plugin-Specific Settings ---------------------------------- }}}


" ----- Key Mappings ---------------------------------------------- {{{
let mapleader = " "
"  ----- general -----------------------------------------------------
" Activate 'window mode'
noremap <Leader>w <C-w>
" Save file
noremap <Leader>fs :w<CR>
" Switch to previous buffer == ':b#'
noremap <Leader><TAB> :b#<CR>
" Hide search highlight
noremap <Leader>/ :noh<CR>
" Toggle 'zsh' buffer - for TDD
function! ToggleZshWindow()
    let a:zsh_buff_name = 'zsh'
    let a:zsh_buff = bufwinnr(a:zsh_buff_name)
    if a:zsh_buff <= 0
        " Buffer not visible --> Show in new split
        "  - Show 'zsh' in a new split | Full height - Right edge
        execute "vertical botright sbuffer ".a:zsh_buff_name
        "  - Jump back to original window
        execute "normal \<C-w>\<C-p>"
    else
        " Buffer already visible in current tab --> Close it
        "  - Jump to 'zsh' window
        execute "normal ".a:zsh_buff."\<C-w>\<C-w>"
        "  - Close it
        execute "normal \<C-w>q"
        "  - Jump back to original window
        execute "normal \<C-w>\<C-p>"
    endif
endfunction
nnoremap <Leader>j :call ToggleZshWindow()<CR>

"  ----- scrooloose/nerdtree -----------------------------------------
noremap <Leader>t :NERDTreeFind<CR>
"  ----- tpope/vim-fugitive ------------------------------------------
nnoremap <Leader>gs :Gstatus<CR>
"  ----- scrooloose/nerdcommenter ------------------------------------
map <Leader>; <Plug>NERDCommenterToggle
map <Leader>: <Plug>NERDCommenterSexy
"  ----- junegunn/goyo.vim (zenmode) ---------------------------------
noremap <silent> <Leader>Z :Goyo<CR>
noremap <silent> <Leader>z 1z=
"  ----- tpope/vim-surround ------------------------------------------
function! s:surround_current_word(char)
    " Save position
    let save_pos = getpos(".")

    " Surround with char
    execute "normal ysiw".a:char

    " Restore Position
    " - Move 1 char ahead: To compensate for added leading char
    let save_pos[2] = save_pos[2] + 1
    " - Restore position
    call setpos(".", save_pos)
    " l " Move one char forward
endfunction
" Surround with MD bold chars: **
nmap <silent> <Leader>sb :call <SID>surround_current_word("*") <bar> :call <SID>surround_current_word("*")<CR>
" Surround with MD emph char: _
nmap <silent> <Leader>se :call <SID>surround_current_word("_")<CR>
" Surround with MD code char: `
nmap <silent> <Leader>sc :call <SID>surround_current_word("`")<CR>
" ----- Key Mappings ---------------------------------------------- }}}


" ----- Extra Comands --------------------------------------------- {{{
cmap w!! w !sudo tee > /dev/null %
" ----- Extra Comands --------------------------------------------- }}}
